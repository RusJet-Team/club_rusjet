name: production build and deploy

concurrency:
  group: production_deploy
  cancel-in-progress: true

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: club_rusjet
  DEPLOY_PATH: RUSJET_CLUB

defaults:
  run:
    working-directory: .

jobs:
  build-and-push-image-to-github-packages:
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main
      -
        name: Docker login
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Set variables
        run: |
          echo REP_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          labels: runnumber=${GITHUB_RUN_ID}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:prod,
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:latest,
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
  deploy:
    name: Deploy changes on server
    runs-on: ubuntu-latest
    environment:
      name: production_deploy
    needs: build-and-push-image-to-github-packages
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main
      -
        name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          source: "deploy_infra/*"
          target: ${{ env.DEPLOY_PATH }}
      -
        name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd ${{ env.DEPLOY_PATH }}/deploy_infra
            # PostgreSQL environment variables
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} > .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env
            echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env
            # Django environment variables
            echo DEBUG=${{ secrets.DEBUG }} >> .env
            echo DJANGO_SETTINGS_MODULE=${{ secrets.DJANGO_SETTINGS_MODULE }} >> .env
            echo DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .env
            echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .env
            echo DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }} >> .env
            echo DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }} >> .env
            echo DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }} >> .env
            echo SERVER_EMAIL=${{ secrets.SERVER_EMAIL }} >> .env
            echo SERVER_EMAIL_PASSWORD=${{ secrets.SERVER_EMAIL_PASSWORD }} >> .env
            # Swag environment variables
            echo PUID=${{ secrets.PUID }} >> .env
            echo PGID=${{ secrets.PGID }} >> .env
            echo URL=${{ secrets.URL }} >> .env
            echo EMAIL=${{ secrets.SSL_EMAIL }} >> .env
            # Очистка неиспользуемых контейнеров, образов, сетей
            docker system prune --force
            # Создание сети вынесено отдельно для возможности независимо перезапускать контейнеры (через external networks)
            docker network create swag_network || true
            # Установка приложения
            sudo cp -rf deploy.service /etc/systemd/system/deploy.service
            sudo systemctl daemon-reload
            sudo systemctl restart deploy.service
            # После установки удаляем файлы
            rm deploy.service
            # cron задачи
            sleep 10
            docker exec backend_club ./manage.py crontab add
  send_message:
    name: Send message in telegram
    runs-on: ubuntu-latest
    environment:
      name: production_deploy
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
                  Код на сервере обновлён!
